#!/bin/sh

# Welcome to the Alessio Rocco laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.
# Thanks to https://github.com/thoughtbot/laptop

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

update_shell() {
  local shell_path;
  shell_path="$(which fish)"

  fancy_echo "Changing your shell to fish ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

append_to_init_fish() {
  local text="$1" init_fish
  local skip_new_line="${2:-0}"

  init_fish="$HOME/.config/omf/init.fish"

  if ! grep -Fqs "$text" "$init_fish"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$init_fish"
    else
      printf "\n%s\n" "$text" >> "$init_fish"
    fi
  fi
}

append_to_tmux_conf() {
  local text="$1" tmux_conf
  local skip_new_line="${2:-0}"

  tmux_conf="$HOME/.tmux.conf"

  if ! grep -Fqs "$text" "$tmux_conf"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$tmux_conf"
    else
      printf "\n%s\n" "$text" >> "$tmux_conf"
    fi
  fi
}

install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  fi
}

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
    export PATH="/usr/local/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "caskroom/cask"
tap "homebrew/services"

# Unix
brew "fish"
brew "git"
brew "openssl"
brew "telnet"
brew "rcm"
brew "reattach-to-user-namespace"
brew "tmux"
brew "vim"
brew "neovim"
brew "the_silver_searcher"

# GitHub
brew "hub"

# Image manipulation
brew "pkg-config"
brew "imagemagick@6"

# Programming language prerequisites and package managers
brew "coreutils"
brew "gpg"

# Databases
brew "postgres", restart_service: :changed
brew "redis", restart_service: :changed

# Apps
cask "atom"
cask "iterm2"
cask "spectacle"
cask "cleanmymac"
cask "slack"
cask "skype"
cask "franz"
cask "google-chrome"
cask "firefox"
EOF

brew link imagemagick@6 --force

case "$SHELL" in
  */fish)
    if [ "$(which fish)" != '/usr/local/bin/fish' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

if [ ! -d "$HOME/.local/share/omf" ]; then
  fancy_echo "Install oh-my-fish"
  curl -L https://get.oh-my.fish | fish
fi

if [ ! -f "$HOME/.config/omf/init.fish" ]; then
  touch "$HOME/.config/omf/init.fish"
fi

fancy_echo "Configuring asdf version manager..."
if [ ! -d "$HOME/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.4.1
  append_to_init_fish "source $HOME/.asdf/asdf.fish" 1
  mkdir -p "$HOME/.config/fish/completions"
  cp "$HOME/.asdf/completions/asdf.fish" "$HOME/.config/fish/completions"
fi

source "$HOME/.asdf/asdf.sh"
install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

fancy_echo "Installing latest Ruby..."
install_asdf_language "ruby"
gem update --system
gem_install_or_update "bundler"
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing latest Node..."
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs"

fancy_echo "Installing Tmux Plugin Manager..."
if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
  git clone https://github.com/tmux-plugins/tpm "$HOME/.tmux/plugins/tpm"
fi

if [ ! -f "$HOME/.tmux.conf" ]; then
  append_to_tmux_conf "# List of plugins" 1
  append_to_tmux_conf "set -g @plugin 'tmux-plugins/tpm'" 1
  append_to_tmux_conf "# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)"
  append_to_tmux_conf "run '~/.tmux/plugins/tpm/tpm'" 1
fi

DOTFILES_DIR="$HOME/dotfiles"

fancy_echo "Installing dotfiles..."
if [ ! -d "$DOTFILES_DIR" ]; then
  git clone https://github.com/AlessioRocco/dotfiles "$DOTFILES_DIR"
fi
rcup -K -d "$DOTFILES_DIR" rcrc
rcup

fancy_echo "Configuring iTerm2..."
# Copy Monaco for Powerline Font
cp "$DOTFILES_DIR/assets/fonts/Monaco+for+Powerline.otf" "$HOME/Library/Fonts/"
# Specify the preferences directory
defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string "$HOME/.iterm2"
# Tell iTerm2 to use the custom preferences in the directory
defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true
